name: Deployments

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: environment
        required: true
jobs:
  deploy:
    environment: ${{ inputs.environment }}
    name: Deploy Get Startnet
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16.x
        uses: actions/setup-node@v2
        with:
          node-version: 16.x
          registry-url: 'https://registry.npmjs.org'

      - name: Get Yarn cache directory
        run: echo "::set-output name=YARN_CACHE_DIR::$(yarn cache dir)"
        id: yarn-cache-dir

      - name: Get Yarn version
        run: echo "::set-output name=YARN_VERSION::$(yarn --version)"
        id: yarn-version

      - name: Cache yarn dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir.outputs.YARN_CACHE_DIR }}
          key: yarn-cache-${{ runner.os }}-${{ steps.yarn-version.outputs.YARN_VERSION }}-${{ hashFiles('yarn.lock') }}
      - run: yarn install --no-immutable
      - run: yarn setup
      - run: yarn clean

      - name: Staging Deployment
        run: |
          VERSION=$(node -p "require('./packages/get-starknet/package.json').version")
           
          npm --prefix ./packages/get-starknet version --new-version ${VERSION}-staging --no-git-tag-version
          yarn workspace @consensys/get-starknet build
          
          npm publish ./packages/get-starknet  --tag staging --access public 2>&1 > /dev/null || :
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: inputs.environment == 'staging'

      - name: Production Deployment
        run: |
          VERSION=$(node -p "require('./packages/get-starknet/package.json').version")

          npm --prefix ./packages/get-starknet version --new-version ${VERSION} --no-git-tag-version --allow-same-version
          yarn workspace @consensys/get-starknet build
          
          npm publish ./packages/get-starknet --tag latest --access public 2>&1 > /dev/null || :
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        if: inputs.environment == 'production'
