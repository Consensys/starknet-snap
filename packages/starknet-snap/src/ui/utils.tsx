import type { TransactionRequest } from '../types/snapState';
import type { ExecuteTxnUIErrors } from './components';

/**
 * Generate the interface for an interactive ui flow.
 *
 * This function creates a UI interface for a specific ui flow by dynamically rendering
 * the provided React component with the given props. The component and props are passed as parameters,
 * ensuring type safety and flexibility for various interactive ui flows.
 *
 * @template Props - The type of props expected by the React component.
 * @param Component - The JSX component to render, which is expected to handle the UI for the flow.
 * It should accept props of type `Props`.
 * @param request - An object containing the properties required by the `Component` along with an `id` field.
 * The `request` object must match the props expected by the `Component`.
 * @returns A Promise that resolves to the interface ID generated by the Snap request.
 * The ID can be used for tracking or referencing the created interface.
 */
export async function generateFlow<Props>(
  Component: any, // Generic Component expecting props of type P
  request: Props & { id: string }, // Request must match props and include an `id`
) {
  return await snap.request({
    method: 'snap_createInterface',
    params: {
      ui: <Component {...request} />,
      context: {
        id: request.id,
      },
    },
  });
}

export type UpdateInterfaceParams = {
  id: string;
  ui: JSX.Element;
};

/**
 *
 * @param id
 * @param ui
 */
export async function updateInterface(
  id: string,
  ui: JSX.Element,
): Promise<void> {
  await snap.request({
    method: 'snap_updateInterface',
    params: {
      id,
      ui,
    },
  });
}
